apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "minio.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "minio.labels" . | nindent 4 }}
    {{- with .Values.commonLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with .Values.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ if eq .Values.mode "distributed" }}{{ .Values.replicaCount }}{{ else }}1{{ end }}
  selector:
    matchLabels:
      {{- include "minio.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "minio.selectorLabels" . | nindent 8 }}
        {{- with .Values.commonLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.commonAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "minio.serviceAccountName" . }}
      {{- if .Values.securityContext }}
      securityContext:
        {{- if .Values.securityContext.runAsNonRoot }}
        runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
        {{- end }}
        {{- if .Values.securityContext.fsGroup }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
        {{- end }}
        {{- if .Values.securityContext.runAsUser }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
        {{- end }}
        {{- if .Values.securityContext.runAsGroup }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
        {{- end }}
      {{- end }}
      containers:
        - name: minio
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
          command:
            - /usr/bin/docker-entrypoint.sh
          args:
            - minio
            - server
            - /data
            {{- if .Values.console.enabled }}
            - --console-address
            - ":9090"
            {{- end }}
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "minio.secretName" . }}
                  key: root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "minio.secretName" . }}
                  key: root-password
            {{- if .Values.buckets.enabled }}
            {{- range .Values.buckets.list }}
            {{- if and .notifications .notifications.enabled .notifications.webhook }}
            - name: MINIO_CONSOLE_PORT
              value: "9090"
            - name: MINIO_NOTIFY_WEBHOOK_ENABLE_PRIMARY
              value: "on"
            - name: MINIO_NOTIFY_WEBHOOK_ENDPOINT_PRIMARY
              value: "{{ .notifications.webhook.endpoint }}"
            {{- if .notifications.webhook.authToken }}
            - name: MINIO_NOTIFY_WEBHOOK_AUTH_TOKEN_PRIMARY
              value: "{{ .notifications.webhook.authToken }}"
            {{- end }}
            {{- end }}
            {{- end }}
            {{- end }}
          ports:
            - name: api
              containerPort: 9000
              protocol: TCP
            {{- if .Values.console.enabled }}
            - name: console
              containerPort: 9090
              protocol: TCP
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: api
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: api
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /data
      volumes:
        - name: data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "minio.fullname" . }}-pvc
          {{- else }}
          emptyDir: {}
          {{- end }}